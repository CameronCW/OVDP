module pipelined_reciprocal (
    input  wire        clk,
    input  wire        reset_n,
    input  wire [31:0] scan_duration,
    output reg  [31:0] reciprocal,
    output reg         reciprocal_valid
);

    // Stage 1: Capture scan_duration
    reg [31:0] scan_duration_reg;
    reg        stage1_valid;

    // Stage 2: Perform division
    always @(posedge clk) begin
        if (!reset_n) begin
            scan_duration_reg <= 32'd0;
            reciprocal <= 32'd0;
            reciprocal_valid <= 1'b0;
            stage1_valid <= 1'b0;
        end else begin
            // Stage 1: Register input
            scan_duration_reg <= scan_duration;
            stage1_valid <= 1'b1;

            // Stage 2: Perform division (one cycle later)
            reciprocal <= 32'd32768 / scan_duration_reg;
            reciprocal_valid <= stage1_valid;
        end
    end

endmodule
