module extrapolation_buffer (
    input wire clk,
    input wire reset_n,

    input wire signed [15:0] sample_in,
    input wire valid_in,

    output reg signed [15:0] sample_out,
    output reg valid_out
);

    parameter integer N = 8;  // buffer length
    reg signed [15:0] buffer [0:N-1];
    reg [2:0] write_ptr = 0;

    reg signed [15:0] last_valid;
    reg signed [15:0] next_valid;
    reg [2:0] miss_count = 0;
    reg [2:0] interp_index = 0;
    reg interpolate = 0;

    reg [2:0] denoise_ptr = 0;

    always @(posedge clk) begin
        if (!reset_n) begin
            sample_out <= 0;
            valid_out <= 0;
            miss_count <= 0;
            write_ptr <= 0;
            denoise_ptr <= 0;
            interpolate <= 0;
        end else begin
            if (valid_in) begin
                // Store valid sample into buffer
                buffer[write_ptr] <= sample_in;
                last_valid <= buffer[(write_ptr - 1) % N];
                write_ptr <= write_ptr + 1;
                sample_out <= sample_in;
                valid_out <= 1;

                if (miss_count > 0) begin
                    // Perform retroactive interpolation
                    next_valid <= sample_in;
                    for (interp_index = 1; interp_index <= miss_count; interp_index = interp_index + 1) begin
                        buffer[(write_ptr - miss_count - 1 + interp_index) % N] <=
                            last_valid + ((next_valid - last_valid) * interp_index) / (miss_count + 1);
                    end
                    miss_count <= 0;
                end
            end else begin
                // Missed sample
                buffer[write_ptr] <= sample_out;  // hold last sample
                miss_count <= miss_count + 1;
                write_ptr <= write_ptr + 1;
                valid_out <= 1;
                sample_out <= buffer[(write_ptr - 1) % N]; // hold old value
            end
        end
    end
endmodule
